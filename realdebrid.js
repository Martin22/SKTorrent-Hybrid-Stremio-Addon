const axios = require('axios');
const https = require('https');
const http = require('http');

const createClient = (apiKey) => axios.create({
    baseURL: 'https://api.real-debrid.com/rest/1.0',
    timeout: 15000,
    headers: {
        'Authorization': `Bearer ${apiKey}`,
        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'
    },
    httpsAgent: new https.Agent({ keepAlive: true, maxSockets: 10, timeout: 15000 }),
    httpAgent: new http.Agent({ keepAlive: true, maxSockets: 10, timeout: 15000 })
});

const handleError = (error, context) => {
    const message = error.response?.data?.error || error.message;
    const status = error.response?.status || 500;
    let userMessage = message;
    // Speci√°ln√≠ p≈ô√≠pad pro magnet_conversion
    if (message === 'parameter_missing' && error.response?.data?.error_details?.includes('{files} is missing')) {
        userMessage = 'Magnet link nelze zpracovat: chyb√≠ metadata nebo je torrent nekompletn√≠. Zkuste jin√Ω zdroj.';
    }
    if (error.response?.data?.error === 'magnet_error' || error.response?.data?.error === 'magnet_conversion') {
        userMessage = 'Magnet link nelze konvertovat. Pravdƒõpodobnƒõ je neplatn√Ω nebo nen√≠ dostatek seed≈Ø.';
    }
    console.error(`‚ùå ${context}: ${status} - ${userMessage}`);
    if (error.response?.data?.error_details) {
        console.error(`   Details: ${error.response.data.error_details}`);
    }
    if (error.response?.data?.error_code) {
        console.error(`   Code: ${error.response.data.error_code}`);
    }
    return null;
};

const waitForTorrent = async (apiKey, torrentId, maxMinutes = 2, isNew = false) => {
    const client = createClient(apiKey);
    const maxAttempts = maxMinutes * 6; // 10s intervaly
    const torrentType = isNew ? 'nov√Ω' : 'existuj√≠c√≠';
    for (let attempt = 1; attempt <= maxAttempts; attempt++) {
        try {
            const { data } = await client.get(`/torrents/info/${torrentId}`);
            const { status, progress = 0, links } = data;
            console.log(`‚è≥ RD Progress (${torrentType}): ${progress}% (${status}) - ${attempt}/${maxAttempts}`);
            if (status === 'downloaded' && links) {
                console.log(`‚úÖ Torrent ${torrentType} dokonƒçen!`);
                return await getDownloadLinks(apiKey, links);
            }
            const terminalErrorStates = [
                'error', 'magnet_error', 'virus', 'dead',
                'magnet_conversion', 'timeout', 'failed'
            ];
            if (terminalErrorStates.includes(status)) {
                const errorMessages = {
                    'magnet_error': 'Neplatn√Ω nebo po≈°kozen√Ω magnet link',
                    'magnet_conversion': 'Nelze konvertovat magnet link',
                    'virus': 'Detekov√°n virus v torrentu',
                    'dead': 'Torrent je mrtv√Ω (≈æ√°dn√© seeders)',
                    'timeout': 'Timeout p≈ôi zpracov√°n√≠',
                    'failed': 'Obecn√© selh√°n√≠ torrenta',
                    'error': 'Nespecifikovan√° chyba'
                };
                const errorMsg = errorMessages[status] || `Nezn√°m√° chyba: ${status}`;
                console.log(`‚ùå Torrent ${torrentType} selhal s terminal stavem: ${status}`);
                console.log(`üí° D≈Øvod: ${errorMsg}`);
                return null;
            }
            if (status === 'waiting_files_selection') {
                console.log(`üîß Vyb√≠r√°m soubory pro ${torrentType} torrent: ${torrentId}`);
                await selectAllFiles(apiKey, torrentId);
                continue;
            }
            const activeStates = [
                'downloading', 'queued', 'uploading', 'compressing'
            ];
            if (activeStates.includes(status)) {
                console.log(`‚è≥ Torrent ${torrentType} je aktivn√≠ (${status}), ƒçek√°m...`);
                await new Promise(resolve => setTimeout(resolve, 10000));
                continue;
            }
            console.log(`‚ö†Ô∏è Nezn√°m√Ω stav torrenta: ${status}, pokraƒçujem v ƒçek√°n√≠...`);
            await new Promise(resolve => setTimeout(resolve, 10000));
        } catch (error) {
            console.error(`‚ùå Chyba p≈ôi kontrole ${torrentType} torrent: ${error.message}`);
            if (attempt < maxAttempts && error.response?.status >= 500) {
                console.log(`üîÑ API chyba, zkou≈°√≠m znovu za 15s...`);
                await new Promise(resolve => setTimeout(resolve, 15000));
                continue;
            }
            return handleError(error, `ƒåek√°n√≠ na ${torrentType} torrent`);
        }
    }
    console.log(`‚è∞ Timeout p≈ôi ƒçek√°n√≠ na ${torrentType} torrent po ${maxMinutes} minut√°ch`);
    return null;
};

const addNewTorrent = async (apiKey, magnetLink, maxWaitMinutes = 2) => {
    const client = createClient(apiKey);
    try {
        console.log(`üì• P≈ôid√°v√°m nov√Ω torrent do RD...`);
        console.log(`üß≤ Magnet: ${magnetLink}`);
        const formData = new URLSearchParams();
        formData.append('magnet', magnetLink);
        const { data } = await client.post('/torrents/addMagnet', formData, {
            headers: { 'Content-Type': 'application/x-www-form-urlencoded' }
        });
        const torrentId = data.id;
        console.log(`üì• Torrent p≈ôid√°n do RD: ${torrentId}`);
        console.log(`üìã Response:`, data);
        console.log(`üîß Vyb√≠r√°m soubory pro spu≈°tƒõn√≠ torrenta...`);
        await selectAllFiles(apiKey, torrentId);
        return await waitForTorrent(apiKey, torrentId, maxWaitMinutes, true);
    } catch (error) {
        console.error(`‚ùå Detailn√≠ chyba p≈ôi p≈ôid√°v√°n√≠ torrenta:`);
        console.error(`   Status: ${error.response?.status}`);
        console.error(`   Data:`, error.response?.data);
        console.error(`   Headers:`, error.response?.headers);
        return handleError(error, 'P≈ôid√°n√≠ nov√©ho torrenta');
    }
};

const selectAllFiles = async (apiKey, torrentId, maxRetries = 5) => {
    const client = createClient(apiKey);
    let attempt = 0;
    while (attempt < maxRetries) {
        try {
            console.log(`üîß Vyb√≠r√°m v≈°echny soubory pro torrent: ${torrentId} (pokus ${attempt + 1}/${maxRetries})`);
            const formData = new URLSearchParams();
            formData.append('files', 'all');
            await client.post(`/torrents/selectFiles/${torrentId}`, formData, {
                headers: { 'Content-Type': 'application/x-www-form-urlencoded' }
            });
            console.log(`‚úÖ Vybr√°ny v≈°echny soubory pro torrent: ${torrentId}`);
            return;
        } catch (error) {
            const errData = error.response?.data;
            const isParamMissing = errData?.error === 'parameter_missing' &&
                errData?.error_details && errData.error_details.includes('{files} is missing');
            console.error(`‚ùå Chyba p≈ôi v√Ωbƒõru soubor≈Ø:`, errData);
            if (isParamMissing && attempt < maxRetries - 1) {
                console.log('‚è≥ {files} is missing, ƒçek√°m 3s a zkou≈°√≠m znovu...');
                await new Promise(resolve => setTimeout(resolve, 3000));
                attempt++;
                continue;
            }
            handleError(error, 'V√Ωbƒõr soubor≈Ø');
            return;
        }
    }
    console.error(`‚ùå Nepoda≈ôilo se vybrat soubory pro torrent: ${torrentId} po ${maxRetries} pokusech.`);
};

const getDownloadLinks = async (apiKey, rdLinks) => {
    const client = createClient(apiKey);
    try {
        const linkPromises = rdLinks.slice(0, 3).map(async (link) => {
            try {
                const formData = new URLSearchParams();
                formData.append('link', link);
                const { data } = await client.post('/unrestrict/link', formData, {
                    headers: { 'Content-Type': 'application/x-www-form-urlencoded' }
                });
                return {
                    filename: data.filename,
                    url: data.download,
                    filesize: data.filesize
                };
            } catch (error) {
                console.error(`‚ùå Chyba p≈ôi unrestrict linku: ${error.message}`);
                return null;
            }
        });
        const results = await Promise.all(linkPromises);
        return results.filter(Boolean);
    } catch (error) {
        return handleError(error, 'Z√≠sk√°n√≠ download link≈Ø');
    }
};

// V≈ædy p≈ôidej torrent do RD a ƒçekej na jeho zpracov√°n√≠
const addMagnetIfNotExists = async (apiKey, magnetLink, infoHash, maxWaitMinutes = 2) => {
    if (!apiKey) {
        console.log(`‚ùå ≈Ω√°dn√Ω RD API kl√≠ƒç pro ${infoHash}`);
        return null;
    }
    try {
        return await addNewTorrent(apiKey, magnetLink, maxWaitMinutes);
    } catch (error) {
        console.log(`‚ùå RD: V√Ωjimka p≈ôi zpracov√°n√≠ ${infoHash}: ${error.message}`);
        return handleError(error, 'RD operace');
    }
};

module.exports = {
    waitForTorrent,
    addMagnetIfNotExists,
    addNewTorrent,
    selectAllFiles,
    getDownloadLinks
};
